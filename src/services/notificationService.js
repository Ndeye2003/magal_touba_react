// src/services/notificationService.js

/**
 * ========================================
 * SERVICE DE GESTION DES NOTIFICATIONS
 * ========================================
 * 
 * Ce service centralise toutes les interactions avec l'API Laravel
 * concernant les notifications du Magal Touba.
 * 
 * STRUCTURE DE LA BASE DE DONN√âES :
 * ---------------------------------
 * Table `notifications` :
 *   - id: Identifiant unique
 *   - titre: Titre de la notification
 *   - message: Contenu du message
 *   - evenement_id: ID de l'√©v√©nement li√© (nullable)
 *   - date_envoi: Date d'envoi de la notification
 * 
 * Table `notification_user` (Pivot Many-to-Many) :
 *   - notification_id: R√©f√©rence vers la notification
 *   - user_id: R√©f√©rence vers l'utilisateur
 *   - est_lu: Statut de lecture (boolean)
 *   - date_lu: Date de lecture (nullable)
 * 
 * FONCTIONNALIT√âS :
 * ----------------
 * ‚úÖ Lister les notifications de l'utilisateur connect√©
 * ‚úÖ Compter les notifications non lues
 * ‚úÖ Marquer une notification comme lue
 * ‚úÖ Marquer toutes les notifications comme lues
 * ‚úÖ [ADMIN] Envoyer une notification √† tous les utilisateurs
 * ‚úÖ [ADMIN] Envoyer une notification aux inscrits d'un √©v√©nement
 * ‚úÖ [ADMIN] Supprimer une notification
 */

import api from './api';

class NotificationService {
  
  // =====================================
  // CONSULTATION DES NOTIFICATIONS
  // =====================================
  
  /**
   * R√©cup√©rer la liste des notifications de l'utilisateur connect√©
   * 
   * ENDPOINT : GET /api/notifications
   * 
   * @param {Object} params - Param√®tres de filtrage
   * @param {number} params.page - Num√©ro de page (pagination)
   * @param {number} params.per_page - Nombre d'√©l√©ments par page
   * @param {string} params.statut - Filtrer par statut : 'lues' | 'non-lues' | 'toutes'
   * 
   * @returns {Promise<Object>} R√©ponse avec structure :
   * {
   *   data: [
   *     {
   *       id: 1,
   *       titre: "Nouvelle conf√©rence",
   *       message: "Une conf√©rence a √©t√© ajout√©e...",
   *       evenement: { id: 5, titre: "..." }, // Si li√© √† un √©v√©nement
   *       date_envoi: "2024-10-01 14:30:00",
   *       est_lu: false,                      // Statut pour l'utilisateur
   *       date_lu: null                       // Date de lecture
   *     }
   *   ],
   *   pagination: {
   *     current_page: 1,
   *     total: 25,
   *     per_page: 10,
   *     last_page: 3
   *   }
   * }
   * 
   * @throws {Error} Si erreur r√©seau ou serveur
   * 
   * EXEMPLE D'UTILISATION :
   * -----------------------
   * const notifications = await notificationService.getNotifications({
   *   page: 1,
   *   per_page: 10,
   *   statut: 'non-lues'
   * });
   */
  async getNotifications(params = {}) {
    try {
      console.log('üì• R√©cup√©ration des notifications...', params);
      
      const response = await api.get('/notifications', { params });
      
      console.log(`‚úÖ ${response.data.data.length} notifications r√©cup√©r√©es`);
      return response.data;
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des notifications:', error);
      throw error;
    }
  }
  
  /**
   * Obtenir le nombre de notifications non lues
   * 
   * ENDPOINT : GET /api/notifications/non-lues/count
   * 
   * @returns {Promise<Object>} R√©ponse avec structure :
   * {
   *   count: 5  // Nombre de notifications non lues
   * }
   * 
   * EXEMPLE D'UTILISATION :
   * -----------------------
   * const { count } = await notificationService.getUnreadCount();
   * console.log(`${count} notifications non lues`);
   */
  async getUnreadCount() {
    try {
      const response = await api.get('/notifications/non-lues/count');
      console.log(`üîî ${response.data.count} notification(s) non lue(s)`);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur lors du comptage des notifications:', error);
      throw error;
    }
  }
  
  // =====================================
  // ACTIONS UTILISATEUR
  // =====================================
  
  /**
   * Marquer une notification sp√©cifique comme lue
   * 
   * ENDPOINT : POST /api/notifications/{id}/marquer-comme-lue
   * 
   * Cette action met √† jour la table pivot `notification_user` :
   * - est_lu = true
   * - date_lu = maintenant
   * 
   * @param {number} notificationId - ID de la notification
   * 
   * @returns {Promise<Object>} R√©ponse avec structure :
   * {
   *   success: true,
   *   message: "Notification marqu√©e comme lue"
   * }
   * 
   * @throws {Error} Si la notification n'existe pas ou n'appartient pas √† l'utilisateur
   * 
   * EXEMPLE D'UTILISATION :
   * -----------------------
   * await notificationService.marquerCommeLue(15);
   */
  async marquerCommeLue(notificationId) {
    try {
      console.log(`üìñ Marquage de la notification ${notificationId} comme lue...`);
      
      const response = await api.post(
        `/notifications/${notificationId}/marquer-comme-lue`
      );
      
      console.log('‚úÖ Notification marqu√©e comme lue');
      return response.data;
      
    } catch (error) {
      console.error('‚ùå Erreur lors du marquage comme lu:', error);
      throw error;
    }
  }
  
  /**
   * Marquer TOUTES les notifications de l'utilisateur comme lues
   * 
   * ENDPOINT : POST /api/notifications/marquer-toutes-comme-lues
   * 
   * Met √† jour en masse tous les enregistrements dans `notification_user`
   * o√π user_id = utilisateur connect√© et est_lu = false
   * 
   * @returns {Promise<Object>} R√©ponse avec structure :
   * {
   *   success: true,
   *   message: "12 notifications marqu√©es comme lues",
   *   count: 12  // Nombre de notifications mises √† jour
   * }
   * 
   * EXEMPLE D'UTILISATION :
   * -----------------------
   * const result = await notificationService.marquerToutesCommeLues();
   * console.log(`${result.count} notifications marqu√©es`);
   */
  async marquerToutesCommeLues() {
    try {
      console.log('üìö Marquage de toutes les notifications comme lues...');
      
      const response = await api.post('/notifications/marquer-toutes-comme-lues');
      
      console.log(`‚úÖ ${response.data.count} notification(s) marqu√©e(s) comme lue(s)`);
      return response.data;
      
    } catch (error) {
      console.error('‚ùå Erreur lors du marquage global:', error);
      throw error;
    }
  }
  
  // =====================================
  // ACTIONS ADMIN UNIQUEMENT
  // =====================================
  
  /**
   * [ADMIN] Envoyer une notification √† TOUS les utilisateurs
   * 
   * ENDPOINT : POST /api/notifications/envoyer-a-tous
   * ACC√àS : Administrateurs uniquement
   * 
   * Cr√©e une notification et l'associe automatiquement √† tous les
   * utilisateurs dans la table `notification_user`
   * 
   * @param {Object} notificationData - Donn√©es de la notification
   * @param {string} notificationData.titre - Titre (requis)
   * @param {string} notificationData.message - Message (requis)
   * @param {number} [notificationData.evenement_id] - ID √©v√©nement li√© (optionnel)
   * 
   * @returns {Promise<Object>} R√©ponse avec structure :
   * {
   *   success: true,
   *   message: "Notification envoy√©e √† 150 utilisateurs",
   *   notification: {
   *     id: 23,
   *     titre: "...",
   *     message: "...",
   *     ...
   *   },
   *   count: 150  // Nombre d'utilisateurs notifi√©s
   * }
   * 
   * @throws {Error} Si non admin ou donn√©es invalides
   * 
   * EXEMPLE D'UTILISATION :
   * -----------------------
   * await notificationService.envoyerATous({
   *   titre: "Changement d'horaire",
   *   message: "La conf√©rence du soir est avanc√©e √† 18h",
   *   evenement_id: 5
   * });
   */
  async envoyerATous(notificationData) {
    try {
      console.log('üì¢ Envoi de notification globale...');
      
      const response = await api.post(
        '/notifications/envoyer-a-tous', 
        notificationData
      );
      
      console.log(`‚úÖ Notification envoy√©e √† ${response.data.count} utilisateur(s)`);
      return response.data;
      
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'envoi global:', error);
      throw error;
    }
  }
  
  /**
   * [ADMIN] Envoyer une notification aux inscrits d'un √©v√©nement
   * 
   * ENDPOINT : POST /api/notifications/envoyer-aux-inscrits
   * ACC√àS : Administrateurs uniquement
   * 
   * Envoie une notification uniquement aux utilisateurs inscrits
   * √† un √©v√©nement sp√©cifique (table `inscriptions`)
   * 
   * @param {number} evenementId - ID de l'√©v√©nement cible
   * @param {Object} notificationData - Donn√©es de la notification
   * @param {string} notificationData.titre - Titre (requis)
   * @param {string} notificationData.message - Message (requis)
   * 
   * @returns {Promise<Object>} R√©ponse avec structure :
   * {
   *   success: true,
   *   message: "Notification envoy√©e √† 45 inscrits",
   *   notification: { ... },
   *   count: 45  // Nombre d'inscrits notifi√©s
   * }
   * 
   * EXEMPLE D'UTILISATION :
   * -----------------------
   * await notificationService.envoyerAuxInscrits(5, {
   *   titre: "Rappel : Conf√©rence demain",
   *   message: "N'oubliez pas la conf√©rence pr√©vue demain √† 14h"
   * });
   */
  async envoyerAuxInscrits(evenementId, notificationData) {
    try {
      console.log(`üì® Envoi aux inscrits de l'√©v√©nement ${evenementId}...`);
      
      const response = await api.post('/notifications/envoyer-aux-inscrits', {
        evenement_id: evenementId,
        ...notificationData
      });
      
      console.log(`‚úÖ Notification envoy√©e √† ${response.data.count} inscrit(s)`);
      return response.data;
      
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'envoi cibl√©:', error);
      throw error;
    }
  }
  
  /**
   * [ADMIN] Supprimer une notification
   * 
   * ENDPOINT : DELETE /api/notifications/{id}
   * ACC√àS : Administrateurs uniquement
   * 
   * Supprime la notification ET tous ses enregistrements associ√©s
   * dans `notification_user` (cascade)
   * 
   * @param {number} notificationId - ID de la notification
   * 
   * @returns {Promise<Object>} R√©ponse avec structure :
   * {
   *   success: true,
   *   message: "Notification supprim√©e"
   * }
   * 
   * EXEMPLE D'UTILISATION :
   * -----------------------
   * await notificationService.supprimerNotification(23);
   */
  async supprimerNotification(notificationId) {
    try {
      console.log(`üóëÔ∏è Suppression de la notification ${notificationId}...`);
      
      const response = await api.delete(`/notifications/${notificationId}`);
      
      console.log('‚úÖ Notification supprim√©e');
      return response.data;
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la suppression:', error);
      throw error;
    }
  }
}

// =====================================
// EXPORT SINGLETON
// =====================================

/**
 * Instance unique du service (pattern Singleton)
 * Garantit qu'il n'y a qu'une seule instance dans toute l'application
 */
const notificationService = new NotificationService();

export default notificationService;